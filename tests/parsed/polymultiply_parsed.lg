

func int main() /* Function def */ {
    curve f(x), g(x); /* Declaration */  
    f = input_poly(10); /* Assignment */  
    g = input_poly(9); /* Assignment */   

    complex<real, real> y_f[11], y_g[11]; /* Declaration */ 

    y_f = FFT(f,10); /* Assignment */ 
    y_g = FFT(g,10); /* Assignment */ 

    complex y[11]; /* Declaration */ 

    y = y_f * y_g; /* Assignment */  

    curve c(k) = InverseFFT(y,11); /* Declaration */  

    print("Curve is ", c(t)); /* Function Call */  
    
    return 0; /* Return */ 
}

func complex FFT(curve f,int degree) /* Function def */ 
{ 

    

    curve zeroes(k) = e^(2*k*_i_*pi/(degree + 1)); /* Declaration */ 

    curve y_poly(x) = f(zeroes(x)) ; /* Declaration */ 

    degree += 1; /* Augmented Assignment */ 

    a.b(); /* Object Function Call */ 

    vector<complex> y(degree); /* Declaration */ 


    for k in 0 .. degree { /* For loop */ 

        y[i] = y_poly(i); /* Assignment */ 

    }

    return y; /* Return */ 
}

func curve InverseFFT(complex y,int degree) /* Function def */ {
    
    

    curve zeroes(k) = e^(-2*k*_i_*pi/(degree + 1)); /* Declaration */ 

    
    curve y_poly(x); /* Declaration */ 

    for k in 0 .. degree { /* For loop */ 
        y_poly += y(i) * x^i; /* Augmented Assignment */ 
    }

    vector<complex> y(degree); /* Declaration */ 

    for k in 0..degree { /* For loop */ 

        y[i] = y_poly( zeroes(i) ); /* Assignment */ 

    }

    
    curve c(x); /* Declaration */ 
    for k in 0..degree { /* For loop */ 
        c += y_poly(zeroes(i)) * x^i; /* Augmented Assignment */ 
    }

    return c(x); /* Return */ 

}
