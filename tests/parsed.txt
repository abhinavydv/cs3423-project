func: func
Data Type: int
Identifier: main
Parenthesis: (
Parenthesis: )
Curly: {
Data Type: int
Arithmetic Bin Op: *
Arithmetic Bin Op: *
Arithmetic Bin Op: *
Identifier: a
Arithmetic Bin Op: =
Number Constant: 1
Semi Colon: ;
Data Type: int
Arithmetic Bin Op: *
Identifier: b
Square Bracket: [
Number Constant: 1
Square Bracket: ]
Arithmetic Bin Op: =
Number Constant: 2
Semi Colon: ;
Data Type: int
Identifier: c
Arithmetic Bin Op: =
Number Constant: 3
Semi Colon: ;
Data Type: int
Identifier: d
Arithmetic Bin Op: =
Number Constant: 4
Semi Colon: ;
Identifier: d
Arithmetic Bin Op: =
Number Constant: 6
Semi Colon: ;
Conditional: if
Parenthesis: (
Identifier: a
Logical Op: &&
Number Constant: 1
Parenthesis: )
Curly: {
Identifier: a
Arithmetic Bin Op: =
Number Constant: 2
Semi Colon: ;
Curly: }
Identifier: c
Arithmetic Bin Op: =
Identifier: a
Arithmetic Bin Op: +
Identifier: b
Arithmetic Bin Op: -
Identifier: d
Arithmetic Bin Op: *
Identifier: e
Arithmetic Bin Op: /
Identifier: f
Arithmetic Bin Op: %
Identifier: c
Arithmetic Uni Op: --
Semi Colon: ;
Return: return
Number Constant: 0
Semi Colon: ;
Curly: }
func: func
Data Type: int
Identifier: hehe
Parenthesis: (
Data Type: int
Arithmetic Bin Op: *
Identifier: a
Square Bracket: [
Number Constant: 2
Square Bracket: ]
Comma: ,
Curve: curve
Arithmetic Bin Op: *
Arithmetic Bin Op: *
Identifier: b
Parenthesis: )
Curly: {
Return: return
Identifier: a
Log/Rel Uni Op: !
Arithmetic Bin Op: +
Log/Rel Uni Op: !
Identifier: b
Semi Colon: ;
Curve: curve
Arithmetic Bin Op: *
Identifier: a
Arithmetic Bin Op: =
Number Constant: 1
Semi Colon: ;
Curly: }
